using System;
using System.Linq;

namespace ConsoleBasedBattleships

{
    internal class Program
    {

        static class BattleshipCommands
        {

            public static class BoardCommands
            {

                public static string[,] GenerateBoard(int length, string fillString)
                {
                    string[,] board = new string[length, length];
                    for (int i = 0; i < length; i++)
                    {
                        for (int j = 0; j < length; j++)
                        {
                            board[i, j] = fillString;
                        }
                    }
                    return board;
                }

                public static void DrawBoard(string[,] board, char emptyStringChar, char otherChar)
                {
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    Console.WriteLine("       |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   |\n");
                    Console.WriteLine("       |-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|");
                    for (int i = 0; i < board.GetLength(0); i++)
                    {
                        Console.WriteLine("       |       |       |       |       |       |       |       |       |       |       |");
                        Console.Write($"{i}:     ");
                        for (int j = 0; j < board.GetLength(1); j++)
                        {
                            Console.Write("|");
                            Console.ForegroundColor = ConsoleColor.White;
                            if (board[i, j] == string.Empty) { Console.Write($"   {emptyStringChar}   "); }
                            else { Console.ForegroundColor = ConsoleColor.Red; Console.Write($"   {otherChar}   "); }
                            Console.ForegroundColor = ConsoleColor.DarkGray;
                        }
                        Console.WriteLine("|");
                        Console.WriteLine("       |       |       |       |       |       |       |       |       |       |       |");
                        Console.WriteLine("       |-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|");
                    }
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.WriteLine("\n\n");
                }

                public static void DrawAttackBoard(string[,] board)
                {
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    Console.WriteLine("       |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   |\n");
                    Console.WriteLine("       |-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|");
                    for (int i = 0; i < board.GetLength(0); i++)
                    {
                        Console.WriteLine("       |       |       |       |       |       |       |       |       |       |       |");
                        Console.Write($"{i}:     ");
                        for (int j = 0; j < board.GetLength(1); j++)
                        {
                            Console.Write("|");
                            Console.ForegroundColor = ConsoleColor.White;
                            if (board[i, j] == "hit") { Console.ForegroundColor = ConsoleColor.Red; Console.Write("   x   "); }
                            else if (board[i, j] == "miss") { Console.Write("   o   "); }
                            else { Console.Write("       "); }
                            Console.ForegroundColor = ConsoleColor.DarkGray;
                        }
                        Console.WriteLine("|");
                        Console.WriteLine("       |       |       |       |       |       |       |       |       |       |       |");
                        Console.WriteLine("       |-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|");
                    }
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.WriteLine("\n\n");
                }

            }

            public static class GenericCommands
            {
                public static string GetInputCoordinate()
                {
                    Regex coordinateRegex = new("^[0-9],[0-9]$");
                    bool showError = false;
                    bool validCoordinate = false;
                    string userCoordinate = "";
                    while (!validCoordinate)
                    {
                        if (showError)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("Error!");
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.Write("Invalid Coordinate! Please Re-Enter Coordinate in the form X,Y: ");
                            userCoordinate = Console.ReadLine() + "";
                        }
                        else
                        {
                            Console.WriteLine("Enter Coordinate in the form X,Y: ");
                            userCoordinate = Console.ReadLine() + "";
                        }
                        showError = true;
                        Console.WriteLine();

                        if (coordinateRegex.IsMatch(userCoordinate))
                        {
                            validCoordinate = true;
                        }
                    }
                    return userCoordinate;
                }

                public static int GetShipLength(string ship)
                {
                    return ship.ToLower() switch
                    {
                        "carrier" => 5,
                        "carrier1" => 5,
                        "carrier2" => 5,
                        "battleship" => 4,
                        "battleship1" => 4,
                        "battleship2" => 4,
                        "cruiser" => 3,
                        "cruiser1" => 3,
                        "cruiser2" => 3,
                        "submarine" => 3,
                        "submarine1" => 3,
                        "submarine2" => 3,
                        "destroyer" => 2,
                        "destroyer1" => 2,
                        "destroyer2" => 2,
                        _ => throw new ArgumentException("Invalid Shiptype!")
                    };
                }

                public static string GetShipOrientation()
                {
                    bool showError = false;
                    bool validOrientation = false;
                    string userOrientation = "";
                    while (!validOrientation)
                    {
                        if (showError)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("Error!");
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.Write("Invalid Orientation! Please enter either V (Vertical) or H (Horizontal): ");
                            userOrientation = Console.ReadLine() + "";
                        }
                        else
                        {
                            Console.WriteLine("Please enter either V (Vertical) or H (Horizontal): ");
                            userOrientation = Console.ReadLine() + "";
                        }
                        showError = true;
                        Console.WriteLine();

                        if (userOrientation.ToUpper() == "H" || userOrientation.ToUpper() == "V")
                        {
                            validOrientation = true;
                        }
                    }
                    return userOrientation.ToLower();
                }

                public static bool ValidateShipPosition(string[,] board, string shiptype, string orientation, string coordinate)
                {
                    int[] coordinateArray = GetXYCoordinate(coordinate);

                    // check position is on board
                    if (orientation == "h")
                    {
                        if (coordinateArray[1] + GetShipLength(shiptype) - 1 > 9)
                        {
                            Console.WriteLine(coordinate);
                            return false;
                        }
                    }
                    else
                    {
                        if (coordinateArray[0] + GetShipLength(shiptype) - 1 > 9)
                        {
                            return false;
                        }
                    }

                    for (int i = 0; i < GetShipLength(shiptype) - 1; i++)
                    {
                        if (orientation == "h")
                        {
                            if (board[coordinateArray[0], (coordinateArray[1] + i)] != string.Empty)
                            {
                                Console.WriteLine(i);
                                return false;
                            }
                        }
                        else
                        {
                            if (board[(coordinateArray[0] + i), coordinateArray[1]] != string.Empty)
                            {
                                return false;
                            }
                        }
                    }


                    return true;
                }

                public static int[] GetXYCoordinate(string coordinate)
                {
                    try
                    {
                        return new int[] { int.Parse(coordinate[2].ToString()), int.Parse(coordinate[0].ToString()) };
                    }
                    catch
                    {
                        throw new ArgumentException("Coordinates not parsable.");
                    }
                }

                public static void PlaceShip(ref string[,] board, string shiptype, string coordinate, string orientation)
                {
                    int[] coordinateArray = GetXYCoordinate(coordinate);
                    for (int i = 0; i < GetShipLength(shiptype); i++)
                    {
                        if (orientation == "h")
                        {
                            board[coordinateArray[0], coordinateArray[1] + i] = shiptype;
                        }
                        else
                        {
                            board[coordinateArray[0] + i, coordinateArray[1]] = shiptype;
                        }
                    }
                }

                public static bool ValidateAttack(string[,] board, string coordinates)
                {
                    int[] coordinateArray = GetXYCoordinate(coordinates);
                    if (board[coordinateArray[0], coordinateArray[1]] != string.Empty)
                    {
                        return false;
                    }
                    return true;
                }

                public static bool CheckShipSunk(string[,] board, string ship)
                {
                    for (int i = 0; i < board.GetLength(0); i++)
                    {
                        for (int j = 0; j < board.GetLength(1); j++)
                        {
                            if (board[i, j] == ship) { return false; }
                        }
                    }
                    return true;
                }
            }
        }

        static void Main(string[] _)
        {
            // generating player boards
            string[,] p1_board_ship = BattleshipCommands.BoardCommands.GenerateBoard(10, string.Empty);
            string[,] p2_board_ship = BattleshipCommands.BoardCommands.GenerateBoard(10, string.Empty);

            // Players Placing Ships
            int shipsPlacedTotal = 0;
            int p1_shipsPlaced = 0;
            int p2_shipsPlaced = 0;
            string[] ships = new string[] { "Carrier","Destroyer" };
            string coordinates = "";
            string orientation = "";

            while (shipsPlacedTotal < ships.Length * 2)
            {
                // p1 placing
                if (p1_shipsPlaced != ships.Length)
                {
                    p1_shipsPlaced++;
                    bool validPlacement = false;
                    bool showError = false;
                    while (!validPlacement)
                    {
                        // if invalid placement
                        if (showError)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("Error!");
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.WriteLine("Ship either collides with previously placed ship or doesn't fit on the board!\n\n");
                            Thread.Sleep(2000);
                            Console.Clear();
                        }

                        // place ship
                        BattleshipCommands.BoardCommands.DrawBoard(p1_board_ship, 'o', 'x');
                        Console.WriteLine($"Player 1, Place your {ships[p1_shipsPlaced - 1]} (Length of {BattleshipCommands.GenericCommands.GetShipLength(ships[p1_shipsPlaced - 1])}):");
                        coordinates = BattleshipCommands.GenericCommands.GetInputCoordinate();
                        Thread.Sleep(500);
                        Console.Clear();
                        BattleshipCommands.BoardCommands.DrawBoard(p1_board_ship, 'o', 'x');
                        orientation = BattleshipCommands.GenericCommands.GetShipOrientation();
                        Thread.Sleep(500);
                        Console.Clear();
                        BattleshipCommands.BoardCommands.DrawBoard(p1_board_ship, 'o', 'x');
                        validPlacement = BattleshipCommands.GenericCommands.ValidateShipPosition(p1_board_ship, ships[p1_shipsPlaced - 1], orientation, coordinates);
                        showError = true;
                    }
                    BattleshipCommands.GenericCommands.PlaceShip(ref p1_board_ship, ships[p1_shipsPlaced - 1], coordinates, orientation);
                }

                // p2 placing
                else
                {
                    p2_shipsPlaced++;
                    bool validPlacement = false;
                    bool showError = false;
                    while (!validPlacement)
                    {
                        // if invalid placement
                        if (showError)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("Error!");
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.WriteLine("Ship either collides with previously placed ship or doesn't fit on the board!\n\n");
                            Thread.Sleep(2000);
                            Console.Clear();
                        }

                        // place ship
                        BattleshipCommands.BoardCommands.DrawBoard(p2_board_ship, 'o', 'x');
                        Console.WriteLine($"Player 2, Place your {ships[p2_shipsPlaced - 1]} (Length of {BattleshipCommands.GenericCommands.GetShipLength(ships[p2_shipsPlaced - 1])}):");
                        coordinates = BattleshipCommands.GenericCommands.GetInputCoordinate();
                        Thread.Sleep(500);
                        Console.Clear();
                        BattleshipCommands.BoardCommands.DrawBoard(p2_board_ship, 'o', 'x');
                        orientation = BattleshipCommands.GenericCommands.GetShipOrientation();
                        Thread.Sleep(500);
                        Console.Clear();
                        BattleshipCommands.BoardCommands.DrawBoard(p2_board_ship, 'o', 'x');
                        validPlacement = BattleshipCommands.GenericCommands.ValidateShipPosition(p2_board_ship, ships[p2_shipsPlaced - 1], orientation, coordinates);
                        showError = true;
                    }
                    BattleshipCommands.GenericCommands.PlaceShip(ref p2_board_ship, ships[p2_shipsPlaced - 1], coordinates, orientation);
                }
                shipsPlacedTotal++;
                Console.Clear();
            }

            bool gameOver = false;
            int attacker = 0;
            int p1HitCount = 0;
            int p2HitCount = 0;
            int p1TotalShots = 0;
            int p2TotalShots = 0;
            string winner = "";
            bool validThisPlacement = false;
            bool showThisError = false;
            string[,] p1_board_att = BattleshipCommands.BoardCommands.GenerateBoard(10, string.Empty);
            string[,] p2_board_att = BattleshipCommands.BoardCommands.GenerateBoard(10, string.Empty);
            int totalShipParts = ships.Sum(x => BattleshipCommands.GenericCommands.GetShipLength(x));
            while (!gameOver)
            {
                if (attacker == 0)
                {
                    Console.WriteLine("You have sunken the following ships so far: ");
                    bool p1nonesunk = true;
                    for (int i = 0; i < ships.Length; i++)
                    {
                        if (BattleshipCommands.GenericCommands.CheckShipSunk(p2_board_ship, ships[i]))
                        {
                            Console.WriteLine($"{ships[i]}.");
                            p1nonesunk = false;
                        }
                    }
                    if (p1nonesunk) { Console.WriteLine("None."); }
                    Console.WriteLine();
                    showThisError = false;
                    validThisPlacement = false;
                    while (!validThisPlacement)
                    {
                        if (showThisError)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("Error!");
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.WriteLine("You have already attacked this position!\n\n");
                            Thread.Sleep(2000);
                            Console.Clear();
                        }
                        BattleshipCommands.BoardCommands.DrawAttackBoard(p1_board_att);
                        Console.WriteLine("Player 1, Fire your attack!");
                        coordinates = BattleshipCommands.GenericCommands.GetInputCoordinate();
                        showThisError = true;
                        validThisPlacement = BattleshipCommands.GenericCommands.ValidateAttack(p1_board_att, coordinates);
                    }
                    int[] coordinateArray = BattleshipCommands.GenericCommands.GetXYCoordinate(coordinates);

                    if (p2_board_ship[coordinateArray[0], coordinateArray[1]] != string.Empty)
                    {
                        p1HitCount++;
                        Console.WriteLine("You hit a ship!");
                        p1_board_att[coordinateArray[0], coordinateArray[1]] = "hit";
                        p2_board_ship[coordinateArray[0], coordinateArray[1]] = "";

                    }
                    else
                    {
                        Console.WriteLine("You missed the ships!");
                        p1_board_att[coordinateArray[0], coordinateArray[1]] = "miss";
                    }
                    attacker = 1;
                    p1TotalShots++;
                }
                else
                {
                    Console.WriteLine("You have sunken the following ships so far: ");
                    bool p2nonesunk = true;
                    for (int i = 0; i < ships.Length; i++)
                    {
                        if (BattleshipCommands.GenericCommands.CheckShipSunk(p1_board_ship, ships[i]))
                        {
                            Console.WriteLine($"{ships[i]}.");
                            p2nonesunk = false;
                        }
                    }
                    if (p2nonesunk) { Console.WriteLine("None."); }
                    Console.WriteLine();
                    showThisError = false;
                    validThisPlacement = false;
                    while (!validThisPlacement)
                    {
                        if (showThisError)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("Error!");
                            Console.ForegroundColor = ConsoleColor.White;
                            Console.WriteLine("You have already attacked this position!\n\n");
                            Thread.Sleep(2000);
                            Console.Clear();
                        }
                        BattleshipCommands.BoardCommands.DrawAttackBoard(p2_board_att);
                        Console.WriteLine("Player 2, Fire your attack!");
                        coordinates = BattleshipCommands.GenericCommands.GetInputCoordinate();
                        showThisError = true;
                        validThisPlacement = BattleshipCommands.GenericCommands.ValidateAttack(p2_board_att, coordinates);
                    }
                    int[] coordinateArray = BattleshipCommands.GenericCommands.GetXYCoordinate(coordinates);

                    if (p1_board_ship[coordinateArray[0], coordinateArray[1]] != string.Empty)
                    {
                        p2HitCount++;
                        Console.WriteLine("You hit a ship!");
                        p2_board_att[coordinateArray[0], coordinateArray[1]] = "hit";
                        p1_board_ship[coordinateArray[0], coordinateArray[1]] = "";
                    }
                    else
                    {
                        Console.WriteLine("You missed the ships!");
                        p2_board_att[coordinateArray[0], coordinateArray[1]] = "miss";
                    }
                    attacker = 0;
                    p2TotalShots++;
                }
                Thread.Sleep(2000);
                Console.Clear();
                if (p1HitCount == totalShipParts)
                {
                    gameOver = true;
                    winner = "Player 1";
                }
                else if (p2HitCount == totalShipParts)
                {
                    gameOver = true;
                    winner = "Player 2";
                }
                else
                {
                    continue;
                }
            }

            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("The winner is...");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine($"-=-=-= {winner} =-=-=-");
            Thread.Sleep(4000);
            Console.Clear();


            Console.WriteLine($"Player 1 Stats: \nTotal Shots: {p1TotalShots}\nTotal Hits: {p1HitCount}\nShip Parts Remaining: {totalShipParts - p2HitCount}\n\n");
            Console.WriteLine($"Player 2 Stats: \nTotal Shots: {p2TotalShots}\nTotal Hits: {p2HitCount}\nShip Parts Remaining: {totalShipParts - p1HitCount}");
            Console.ReadLine();
        }
    }
}
